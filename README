ReVerC
=============================
Matthew Amy

Contributors:
  Alex Parent
  Martin Roetteler

ReVerC (pronounced “reverse”) is a reversible circuit compiler which compiles
a high-level, ml-like language to combinational reversible circuits. It is fully
verified in the sense that the program and compiled circuit, when generated by 
ReVerC, will produce the same output for every input. Furthermore, it is 
formally verified that any ancilla bits used by the compiler are correctly 
cleaned and returned to the pool of 0-initialized ancillas.

BUILD
-----------------------------
The build system for ReVerC is separated into three stages: verification, code 
generation, and compilation. The command
  make verify 
on linux uses the F* compiler to check all verification conditions in the 
F* source code. Note that the Makefile should be updated manually to specify the
path to the F* home directory.
  make fs
extracts F# code from the F* source, which may then be compiled with
  make revs.

F# extraction is currently in experimental status and isn't fully supported,
so the repository includes manually extracted F# code. Effectively, this means
the user should compile ReVerC with the command
  make revs

FOR WINDOWS
A visual studio solution is included in the folder VS. To compile the main
compiler, simply build the visual studio solution.

ReVerC may also be verified by running
  make verify
at the command line. Again, the Makefile should be changed to reflect the path
to the F* home directory.

USAGE
-----------------------------

Run ReVerC with
  reverc.exe

The user interfaces with ReVerC through a read-evaluate-print loop, which
receives a command and program (possibly with an integer parameter), then
runs that commands on the specific program and parameter. To see a full list of
commands and Revs programs registered together with their descriptions, the user
can type "help" or "-h" at the REPL.

New commands and programs can be registered in the ReVerC compiler by adding a
registerProg or registerCmd statement in the source code. Programs and commands
registered via register commands are immediately available to the compiler after
recompiling the binary.

Typing "exit" quits the REPL.
