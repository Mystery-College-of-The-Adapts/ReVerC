[
  "\u0005¨³©3«”\u0015LcXøaS^g",
  [
    [
      "GC.circGCState",
      1,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.circGCState",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCState",
      3,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.circGCState",
      4,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.circGCState",
      5,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.circGCState",
      6,
      2,
      1,
      [
        "@query", "assumption_AncillaHeap.ancHeapRecord_haseq",
        "assumption_BoolExp.boolExp_haseq", "assumption_Circuit.gate_haseq",
        "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int",
        "assumption_Prims.list_haseq", "assumption_Total.t_haseq",
        "data_elim_Total.Mkt", "equation_AncillaHeap.ancHeap",
        "equation_Prims.eqtype", "fuel_guarded_inversion_Total.t",
        "function_token_typing_Prims.bool",
        "haseqTm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "kinding_BoolExp.boolExp@tok", "kinding_Circuit.gate@tok",
        "pretyping_ae567c2fb75be05905677af440075565",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "GC.__proj__MkcircGCState__item__symtab",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.__proj__MkcircGCState__item__isanc",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.__proj__MkcircGCState__item__cvals",
      1,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.garbageCollect",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "data_elim_GC.MkcircGCState",
        "data_elim_Total.Mkt", "equality_tok_BoolExp.BFalse@tok",
        "equation_FStar.Set.eqtype", "equation_Total.lookup",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Total.t",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_isanc",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_Total.lookup", "typing_tok_BoolExp.BFalse@tok"
      ],
      0
    ],
    [
      "GC.garbageCollect",
      2,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect",
      7,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect",
      8,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect",
      10,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect",
      11,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCInit",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCInit",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCInit",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.circGCInit",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCInit",
      5,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCInit",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "GC.circGCAlloc", 1, 2, 1, [ "@query" ], 0 ],
    [
      "GC.circGCAlloc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAlloc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAlloc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.circGCAlloc",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAlloc",
      6,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAlloc",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "GC.circGCAssign", 1, 2, 1, [ "@query" ], 0 ],
    [
      "GC.circGCAssign",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      4,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.circGCAssign",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      8,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      10,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      11,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      13,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      14,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      16,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      18,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.circGCAssign",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCAssign",
      24,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.circGCAssign",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCEval",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.circGCEval",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCEval",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCEval",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.circGCInterp",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.allocNcircGC",
      1,
      2,
      1,
      [
        "@query", "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_1",
        "equality_tok_Prims.LexTop@tok", "int_inversion", "int_typing",
        "primitive_Prims.op_LessThanOrEqual",
        "primitive_Prims.op_Subtraction", "projection_inverse_BoxInt_proj_0",
        "well-founded-ordering-on-nat"
      ],
      0
    ],
    [
      "GC.allocNcircGC",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.allocNcircGC",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.allocNcircGC",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.allocNcircGC",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.allocNcircGC",
      6,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.allocNcircGC",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "GC.allocTycircGC", 1, 2, 1, [ "@query" ], 0 ],
    [
      "GC.allocTycircGC",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.allocTycircGC",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.allocTycircGC",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.allocTycircGC",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.allocTycircGC",
      6,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.allocTycircGC",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.lookup_Lst_gc",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.lookup_Lst_gc",
      2,
      2,
      1,
      [
        "@query", "binder_x_45b5ec812472bc4115943497241d5053_1",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0", "bool_inversion",
        "constructor_distinct_PairHeap.Empty", "disc_equation_ExprTypes.LOC",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_with_fuel_Interpreter.isVal_lst.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal_lst.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_Interpreter.isVal_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Prims.Cons_hd",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_tl",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "refinement_interpretation_Tm_refine_fc003454349819ae5ed8a644efa3342e",
        "subterm_ordering_Prims.Cons", "typing_Interpreter.isVal_lst"
      ],
      0
    ],
    [
      "GC.lookup_Lst_gc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.lookup_Lst_gc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.findGarbage",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.findGarbage",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.findGarbage",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollector",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollector",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollector",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollector",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollector",
      5,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.garbageCollector",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.compileGCCirc",
      1,
      2,
      1,
      [
        "@query", "constructor_distinct_PairHeap.Empty",
        "disc_equation_ExprTypes.ARRAY", "disc_equation_ExprTypes.LAMBDA",
        "disc_equation_ExprTypes.LOC", "disc_equation_ExprTypes.UNIT",
        "disc_equation_Utils.Err", "disc_equation_Utils.Val",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.emptyHeap", "equation_GC.allocTycircGC",
        "equation_Interpreter.config",
        "equation_with_fuel_Interpreter.isVal.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal_lst.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Utils.result",
        "fuel_irrelevance_Interpreter.isVal_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_ExprTypes.ARRAY__0",
        "projection_inverse_PairHeap.Empty__a",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "typing_GC.allocTycircGC"
      ],
      0
    ],
    [
      "GC.compileGCCirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.compileGCCirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.compileGCCirc",
      4,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      18,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      19,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int",
        "binder_x_3ad6abd43c9a73c5e7f6675387388c43_3",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0",
        "binder_x_64493e38fb36af907314606aa8d64a7c_1",
        "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_2",
        "binder_x_e3dc4db8239f49f041127584ba34ace6_4", "bool_inversion",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Nil", "data_elim_Total.Mkt",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.snd",
        "equation_SetExtra.diff", "equation_SetExtra.disjoint",
        "equation_SetExtra.ins", "equation_SetExtra.rem",
        "equation_Total.vals",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.ins", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_967aadad8a4fab8bb8433602482caae0",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_FStar.Set.lemma_equal_elim", "lemma_FStar.Set.mem_complement",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_intersect",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_union",
        "primitive_Prims.op_AmpAmp", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality", "primitive_Prims.op_Negation",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_tl", "projection_inverse_Prims.Nil_a",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "subterm_ordering_Prims.Cons", "token_correspondence_SetExtra.ins",
        "typing_BoolExp.substOneVar", "typing_BoolExp.vars",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.complement",
        "typing_FStar.Set.empty", "typing_FStar.Set.mem",
        "typing_FStar.Set.set", "typing_FStar.Set.singleton",
        "typing_Prims.__proj__Mktuple2__item___2", "typing_Prims.snd",
        "typing_SetExtra.ins", "typing_SetExtra.rem",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.__proj__Mkt__item__dval",
        "typing_Total.__proj__Mkt__item__elts", "typing_Total.lookup",
        "typing_Total.vals", "unit_inversion"
      ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      6,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      12,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      16,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      17,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int",
        "binder_x_3ad6abd43c9a73c5e7f6675387388c43_3",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0",
        "binder_x_64493e38fb36af907314606aa8d64a7c_1",
        "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_2", "bool_inversion",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Nil", "data_elim_Total.Mkt",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.snd",
        "equation_SetExtra.diff", "equation_SetExtra.disjoint",
        "equation_SetExtra.ins", "equation_SetExtra.rem",
        "equation_Total.lookup", "equation_Total.vals",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_FStar.Set.lemma_equal_elim", "lemma_FStar.Set.mem_empty",
        "lemma_FStar.Set.mem_intersect", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "primitive_Prims.op_AmpAmp",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Nil_a",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "subterm_ordering_Prims.Cons",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_BoolExp.substOneVar", "typing_BoolExp.vars",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.complement",
        "typing_FStar.Set.mem", "typing_FStar.Set.set",
        "typing_FStar.Set.singleton", "typing_FStar.Set.union",
        "typing_PairHeap.elts", "typing_Prims.__proj__Mktuple2__item___2",
        "typing_Prims.snd", "typing_SetExtra.ins", "typing_SetExtra.rem",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.__proj__Mkt__item__elts", "typing_Total.lookup",
        "typing_Total.vals", "unit_inversion"
      ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      20,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      28,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_vars_lemma2",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      27,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq", "bool_inversion",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Tm_unit", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.elts",
        "equation_BoolExp.first", "equation_Circuit.circuit",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_GC.garbageCollect",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_SetExtra.disjoint", "equation_SetExtra.ins",
        "equation_Total.lookup", "equation_Total.vals",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.vars.fuel_instrumented",
        "function_token_typing_FStar.List.Tot.test_sort", "int_inversion",
        "interpretation_Tm_abs_6d975972040f14bd0b2b259b83a897e5",
        "interpretation_Tm_abs_fe310fef5a0b8e623223ebff8025fd8e",
        "interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b",
        "interpretation_Tm_arrow_ee204e1712e5f2266a9f0c5cba8f529f",
        "kinding_BoolExp.boolExp@tok", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "lemma_Total.lookup_map",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "token_correspondence_BoolExp.vars.fuel_instrumented",
        "typing_AncillaHeap.elts", "typing_BoolExp.substOneVar",
        "typing_BoolExp.vars", "typing_FStar.Set.mem",
        "typing_FStar.Set.singleton",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_Total.lookup", "typing_Total.vals", "unit_inversion"
      ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_partition_lemma",
      45,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      26,
      2,
      2,
      [
        "@query", "bool_inversion", "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Cons",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Prims.Some",
        "constructor_distinct_Tm_unit", "data_elim_GC.MkcircGCState",
        "data_elim_PairHeap.Heap", "data_elim_Prims.Mktuple2",
        "data_elim_Total.Mkt", "data_typing_intro_BoolExp.BXor@tok",
        "data_typing_intro_Prims.Mktuple2@tok",
        "disc_equation_BoolExp.BFalse", "disc_equation_Prims.Some",
        "equality_tok_BoolExp.BFalse@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.delete_min",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_AncillaHeap.get_min", "equation_AncillaHeap.mem",
        "equation_AncillaHeap.popMin", "equation_BoolExp.first",
        "equation_Circuit.circuit", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_GC.circGCAssign",
        "equation_GC.circGCInit", "equation_Interpreter.boolInit",
        "equation_PairHeap.getMin", "equation_PairHeap.intHeap",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.diff", "equation_SetExtra.disjoint",
        "equation_SetExtra.greaterEq", "equation_SetExtra.ins",
        "equation_SetExtra.rem", "equation_Total.constMap",
        "equation_Total.lookup", "equation_Total.update",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.substOneVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_PairHeap.heap",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Prims.tuple3",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.vars.fuel_instrumented",
        "fuel_irrelevance_PairHeap.elts.fuel_instrumented",
        "fuel_irrelevance_PairHeap.elts_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.Set.empty",
        "function_token_typing_FStar.Set.mem",
        "function_token_typing_FStar.Set.set",
        "function_token_typing_FStar.Set.singleton",
        "function_token_typing_GC.circGCInit",
        "function_token_typing_Interpreter.boolInit",
        "function_token_typing_PairHeap.elts",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq",
        "function_token_typing_Total.__proj__Mkt__item__elts",
        "function_token_typing_Total.lookup",
        "function_token_typing_Total.vals", "int_inversion", "int_typing",
        "interpretation_Tm_abs_3268867124b003f4a98a49f0a1164e06",
        "interpretation_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "interpretation_Tm_abs_f3bec76b5a7811029b03c8cb1edcc1ce",
        "interpretation_Tm_arrow_2c0d400d791d89b628d7628a254fb94e",
        "interpretation_Tm_arrow_390ad325ba9ff654185adbb4ffeea99f",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_82c0946f9652360a5f5968875182b89e",
        "interpretation_Tm_arrow_8eb620905edb85e3266af3fd3164bbad",
        "interpretation_Tm_arrow_9b48db3b49ed8ef8570dbe275c332e3a",
        "interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b",
        "interpretation_Tm_arrow_db119ebfc877e06e31c1e4d794b24394",
        "interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23",
        "interpretation_Tm_arrow_ee204e1712e5f2266a9f0c5cba8f529f",
        "interpretation_Tm_arrow_f285bd18d16ed788dea4e9c47fb2243d",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_intersect",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_union",
        "lemma_SetExtra.greaterEq_elts", "lemma_Total.lookup_map",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_779086306c29597e3dd1127d16405da1",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_Addition", "primitive_Prims.op_AmpAmp",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Prims.Mktuple3__1", "proj_equation_Prims.Mktuple3__2",
        "proj_equation_Prims.Mktuple3__3", "proj_equation_Total.Mkt_dval",
        "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple3__1",
        "projection_inverse_Prims.Mktuple3__2",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.Some_v",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_FStar.Set.empty",
        "token_correspondence_FStar.Set.mem",
        "token_correspondence_FStar.Set.set",
        "token_correspondence_FStar.Set.singleton",
        "token_correspondence_PairHeap.elts",
        "token_correspondence_PairHeap.elts_lst.fuel_instrumented",
        "token_correspondence_SetExtra.greaterEq",
        "token_correspondence_Total.__proj__Mkt__item__elts",
        "token_correspondence_Total.lookup",
        "token_correspondence_Total.vals",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_BoolExp.substOneVar", "typing_BoolExp.substVar",
        "typing_BoolExp.vars", "typing_FStar.List.Tot.fold_left",
        "typing_FStar.Set.complement", "typing_FStar.Set.mem",
        "typing_FStar.Set.singleton", "typing_FStar.Set.union",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_PairHeap.elts", "typing_PairHeap.is_heap",
        "typing_SetExtra.rem",
        "typing_Tm_abs_3268867124b003f4a98a49f0a1164e06",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Tm_abs_f3bec76b5a7811029b03c8cb1edcc1ce",
        "typing_Total.lookup", "typing_Total.mapVals", "typing_Total.update",
        "typing_Total.vals", "typing_tok_BoolExp.BFalse@tok",
        "unit_inversion"
      ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      45,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      46,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      47,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      48,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      49,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      50,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      51,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      52,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      53,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      54,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      55,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      56,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      57,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_partition_lemma",
      58,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      16,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq", "bool_inversion",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Tm_unit",
        "data_elim_GC.MkcircGCState", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_AncillaHeap.zeroHeap", "equation_BoolExp.compileBexpEval",
        "equation_BoolExp.compileBexpEvalSt", "equation_BoolExp.first",
        "equation_Circuit.circuit", "equation_FStar.List.Tot.test_sort",
        "equation_FStar.Set.eqtype", "equation_GC.garbageCollect",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_SetExtra.disjoint", "equation_Total.state",
        "equation_with_fuel_BoolExp.compileBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.compileBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.evalBexp.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "kinding_BoolExp.boolExp@tok", "lemma_Circuit.evalCirc_append",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_Equality", "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_isanc",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.elts", "typing_BoolExp.compileBexpEval",
        "typing_BoolExp.evalBexp", "typing_Circuit.evalCirc",
        "typing_FStar.Set.mem", "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__gates",
        "typing_PairHeap.is_heap", "typing_Total.lookup", "unit_inversion"
      ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_zeroHeap_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      27,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_inversion",
        "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple3",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Some", "constructor_distinct_Tm_unit",
        "data_elim_Total.Mkt", "data_typing_intro_BoolExp.BVar@tok",
        "disc_equation_BoolExp.BFalse", "disc_equation_Prims.None",
        "disc_equation_Prims.Some", "equality_tok_BoolExp.BFalse@tok",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_AncillaHeap.zeroHeap",
        "equation_BoolExp.compileBexpEvalSt", "equation_BoolExp.first",
        "equation_BoolExp.last", "equation_Circuit.circuit",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_GC.circGCAssign",
        "equation_PairHeap.intHeap", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.diff", "equation_SetExtra.disjoint",
        "equation_SetExtra.greaterEq", "equation_SetExtra.ins",
        "equation_SetExtra.rem", "equation_Total.agree_on",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.substOneVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_Circuit.mods.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_PairHeap.heap",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.vars.fuel_instrumented",
        "fuel_irrelevance_PairHeap.elts.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_FStar.Set.mem",
        "function_token_typing_PairHeap.elts",
        "function_token_typing_Prims.bool",
        "function_token_typing_SetExtra.greaterEq", "int_inversion",
        "interpretation_Tm_arrow_2c0d400d791d89b628d7628a254fb94e",
        "interpretation_Tm_arrow_390ad325ba9ff654185adbb4ffeea99f",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "kinding_BoolExp.boolExp@tok", "lemma_Circuit.evalCirc_append",
        "lemma_FStar.Set.mem_complement", "lemma_FStar.Set.mem_intersect",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_subset",
        "lemma_FStar.Set.mem_union", "lemma_Prims.invertOption",
        "lemma_SetExtra.greaterEq_elts", "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Addition", "primitive_Prims.op_AmpAmp",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_LessThan", "primitive_Prims.op_Negation",
        "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Prims.Mktuple3__1", "proj_equation_Prims.Mktuple3__2",
        "proj_equation_Prims.Mktuple3__3",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_GC.MkcircGCState_isanc",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple3__1",
        "projection_inverse_Prims.Mktuple3__2",
        "projection_inverse_Prims.Mktuple3__3",
        "projection_inverse_Prims.Mktuple3__a",
        "projection_inverse_Prims.Mktuple3__b",
        "projection_inverse_Prims.Mktuple3__c",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.Some_v",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_BoolExp.vars.fuel_instrumented",
        "token_correspondence_FStar.Set.mem",
        "token_correspondence_PairHeap.elts",
        "token_correspondence_Prims.op_LessThan",
        "token_correspondence_SetExtra.greaterEq",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_BoolExp.substVar", "typing_BoolExp.vars",
        "typing_Circuit.mods", "typing_FStar.Set.complement",
        "typing_FStar.Set.mem", "typing_FStar.Set.singleton",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__gates",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_PairHeap.elts", "typing_PairHeap.is_heap",
        "typing_SetExtra.rem", "typing_Total.lookup", "unit_inversion"
      ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      45,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      46,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      47,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      48,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      49,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      50,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      51,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_zeroHeap_lemma",
      52,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      22,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      23,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_int",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0",
        "binder_x_64493e38fb36af907314606aa8d64a7c_1",
        "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_2",
        "binder_x_c4ad57559b80f11b499d69e4bf9180c0_4", "bool_inversion",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Nil", "data_elim_Total.Mkt",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.snd", "equation_SetExtra.ins",
        "equation_Total.state", "equation_Total.vals",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_FStar.Set.set",
        "function_token_typing_Prims.int", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23",
        "kinding_Prims.tuple2@tok", "lemma_FStar.Set.lemma_equal_elim",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_tl", "projection_inverse_Prims.Nil_a",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "subterm_ordering_Prims.Cons", "token_correspondence_FStar.Set.set",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.mem",
        "typing_FStar.Set.singleton", "typing_PairHeap.elts",
        "typing_Prims.__proj__Mktuple2__item___2", "typing_Prims.snd",
        "typing_SetExtra.ins",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.__proj__Mkt__item__dval",
        "typing_Total.__proj__Mkt__item__elts", "typing_Total.vals",
        "unit_inversion"
      ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_update_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      18,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      19,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_int",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0",
        "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_2",
        "binder_x_c4ad57559b80f11b499d69e4bf9180c0_4",
        "binder_x_e60bd314918e6f652802aca8b1ee914d_5", "bool_inversion",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Nil", "data_elim_Total.Mkt",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.snd", "equation_SetExtra.disjoint",
        "equation_SetExtra.ins", "equation_SetExtra.rem",
        "equation_Total.agree_on", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_Circuit.mods.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "kinding_Prims.tuple2@tok", "lemma_FStar.Set.lemma_equal_elim",
        "lemma_FStar.Set.mem_complement", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality", "primitive_Prims.op_Negation",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_tl", "projection_inverse_Prims.Nil_a",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "subterm_ordering_Prims.Cons", "typing_Circuit.mods",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.empty",
        "typing_FStar.Set.mem", "typing_FStar.Set.set",
        "typing_FStar.Set.singleton",
        "typing_Prims.__proj__Mktuple2__item___2", "typing_Prims.snd",
        "typing_SetExtra.ins",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.__proj__Mkt__item__elts", "typing_Total.vals",
        "unit_inversion"
      ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      45,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      46,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      47,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      48,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      49,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      50,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_agree_lemma",
      51,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_lemma",
      19,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [ "GC.cvals_lemma", 20, 2, 1, [ "@query" ], 0 ],
    [
      "GC.cvals_pres_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      17,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      18,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_int",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0", "bool_inversion",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Nil", "data_elim_Total.Mkt",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.snd", "equation_SetExtra.ins", "equation_Total.vals",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.ins", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_967aadad8a4fab8bb8433602482caae0",
        "kinding_Prims.tuple2@tok", "lemma_FStar.Set.lemma_equal_elim",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Nil_a",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "subterm_ordering_Prims.Cons", "token_correspondence_SetExtra.ins",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.mem",
        "typing_FStar.Set.set", "typing_FStar.Set.singleton",
        "typing_PairHeap.elts", "typing_Prims.__proj__Mktuple2__item___2",
        "typing_Prims.snd", "typing_SetExtra.ins",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.__proj__Mkt__item__dval",
        "typing_Total.__proj__Mkt__item__elts", "typing_Total.vals",
        "unit_inversion"
      ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      45,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      46,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      47,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      48,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      49,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.cvals_pres_lemma",
      50,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.xor_inverse",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_inverse",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_assoc",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_assoc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_assoc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_assoc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_assoc",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.xor_inverse",
      3,
      2,
      1,
      [
        "@query", "bool_inversion",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_disEquality", "unit_typing"
      ],
      0
    ],
    [
      "GC.xor_assoc",
      6,
      2,
      1,
      [
        "@query", "bool_inversion", "bool_typing",
        "constructor_distinct_PairHeap.Empty",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.emptyHeap",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_Equality", "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "unit_typing"
      ],
      0
    ],
    [ "GC.precond1", 1, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 2, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 3, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 4, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 5, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 6, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 7, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond1", 8, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [
      "GC.precond1",
      9,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.precond1",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond1",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond1",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond1",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond1",
      17,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.precond1",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond1",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond1",
      25,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.precond1",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      15,
      2,
      1,
      [
        "@query", "assumption_BoolExp.boolExp_haseq", "bool_inversion",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Tm_unit", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_BoolExp.compileBexpEval", "equation_BoolExp.first",
        "equation_BoolExp.last", "equation_Circuit.circuit",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_GC.garbageCollect",
        "equation_GC.precond1", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_SetExtra.diff",
        "equation_SetExtra.disjoint", "equation_SetExtra.ins",
        "equation_SetExtra.rem", "equation_Total.agree_on",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.compileBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.compileBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_Circuit.mods.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.evalBexp.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_FStar.Set.mem",
        "function_token_typing_Total.lookup",
        "function_token_typing_Total.vals", "int_inversion",
        "interpretation_Tm_abs_6d975972040f14bd0b2b259b83a897e5",
        "interpretation_Tm_abs_fe310fef5a0b8e623223ebff8025fd8e",
        "interpretation_Tm_arrow_390ad325ba9ff654185adbb4ffeea99f",
        "interpretation_Tm_arrow_9b48db3b49ed8ef8570dbe275c332e3a",
        "interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b",
        "interpretation_Tm_arrow_db119ebfc877e06e31c1e4d794b24394",
        "interpretation_Tm_arrow_ee204e1712e5f2266a9f0c5cba8f529f",
        "kinding_BoolExp.boolExp@tok", "lemma_Circuit.evalCirc_append",
        "lemma_FStar.Set.mem_complement", "lemma_FStar.Set.mem_intersect",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_union",
        "lemma_FStar.Set.subset_mem", "lemma_Total.lookup_map",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_AmpAmp", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality", "primitive_Prims.op_Negation",
        "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "token_correspondence_FStar.Set.mem",
        "token_correspondence_Total.lookup",
        "token_correspondence_Total.vals", "typing_AncillaHeap.elts",
        "typing_BoolExp.vars", "typing_Circuit.evalCirc",
        "typing_Circuit.mods", "typing_FStar.Set.complement",
        "typing_FStar.Set.mem", "typing_FStar.Set.singleton",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__gates",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_SetExtra.ins",
        "typing_Tm_abs_6d975972040f14bd0b2b259b83a897e5",
        "typing_Tm_abs_fe310fef5a0b8e623223ebff8025fd8e",
        "typing_Total.lookup", "unit_inversion"
      ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbage_value_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "GC.precond3", 1, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 2, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 3, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 4, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 5, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 6, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 7, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 8, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [ "GC.precond3", 9, 2, 1, [ "@query", "assumption_Prims.HasEq_int" ], 0 ],
    [
      "GC.precond3",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      14,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.precond3",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond3",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond3",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond3",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond3",
      28,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.precond3",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.precond3",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.precond3",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      34,
      2,
      1,
      [
        "@query", "bool_inversion", "constructor_distinct_BoolExp.BAnd",
        "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BNot",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Prims.None",
        "constructor_distinct_Prims.Some", "constructor_distinct_Tm_unit",
        "data_elim_BoolExp.BAnd", "data_elim_BoolExp.BVar",
        "data_elim_BoolExp.BXor", "data_elim_GC.MkcircGCState",
        "data_elim_PairHeap.Heap", "data_elim_Total.Mkt",
        "data_typing_intro_BoolExp.BVar@tok",
        "data_typing_intro_BoolExp.BXor@tok",
        "data_typing_intro_Prims.Mktuple2@tok",
        "disc_equation_BoolExp.BFalse", "disc_equation_Prims.None",
        "disc_equation_Prims.Some", "equality_tok_BoolExp.BFalse@tok",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_AncillaHeap.zeroHeap", "equation_BoolExp.compileBexpEval",
        "equation_BoolExp.compileBexpEvalSt", "equation_BoolExp.first",
        "equation_BoolExp.last", "equation_Circuit.circuit",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_GC.circGCAssign",
        "equation_GC.garbageCollect", "equation_GC.precond1",
        "equation_GC.precond3", "equation_PairHeap.getMin",
        "equation_PairHeap.intHeap", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.diff", "equation_SetExtra.disjoint",
        "equation_SetExtra.greaterEq", "equation_SetExtra.ins",
        "equation_SetExtra.rem", "equation_Total.agree_on",
        "equation_Total.lookup", "equation_Total.mapVals",
        "equation_Total.state", "equation_Total.update",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.compileBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.factorAs.fuel_instrumented",
        "equation_with_fuel_BoolExp.occursInBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.substOneVar.fuel_instrumented",
        "equation_with_fuel_BoolExp.substVar.fuel_instrumented",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_Circuit.evalCirc.fuel_instrumented",
        "equation_with_fuel_Circuit.mods.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.compileBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.factorAs.fuel_instrumented",
        "fuel_correspondence_BoolExp.occursInBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.substOneVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_Circuit.mods.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_BoolExp.boolExp",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_PairHeap.heap",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Prims.tuple3",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.evalBexp.fuel_instrumented",
        "fuel_irrelevance_BoolExp.vars.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_FStar.Set.empty",
        "function_token_typing_FStar.Set.mem",
        "function_token_typing_FStar.Set.set",
        "function_token_typing_FStar.Set.singleton",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq", "int_inversion",
        "int_typing",
        "interpretation_Tm_abs_3268867124b003f4a98a49f0a1164e06",
        "interpretation_Tm_abs_f3bec76b5a7811029b03c8cb1edcc1ce",
        "interpretation_Tm_arrow_390ad325ba9ff654185adbb4ffeea99f",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_8eb620905edb85e3266af3fd3164bbad",
        "interpretation_Tm_arrow_9cb3c953faf527c316d427b2ce8bd81b",
        "interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23",
        "interpretation_Tm_arrow_ee204e1712e5f2266a9f0c5cba8f529f",
        "interpretation_Tm_arrow_f285bd18d16ed788dea4e9c47fb2243d",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_Circuit.evalCirc_append", "lemma_FStar.Set.mem_complement",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_intersect",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_subset",
        "lemma_FStar.Set.mem_union", "lemma_FStar.Set.subset_mem",
        "lemma_Prims.invertOption", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_map", "lemma_Total.lookup_update1",
        "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_779086306c29597e3dd1127d16405da1",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_AmpAmp", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_Negation", "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Prims.Mktuple3__1", "proj_equation_Prims.Mktuple3__2",
        "proj_equation_Prims.Mktuple3__3", "proj_equation_Total.Mkt_dval",
        "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoolExp.BAnd__0",
        "projection_inverse_BoolExp.BNot__0",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_GC.MkcircGCState_isanc",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_GC.MkcircGCState_top",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple3__1",
        "projection_inverse_Prims.Mktuple3__2",
        "projection_inverse_Prims.Mktuple3__3",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.Nil_a", "projection_inverse_Prims.Some_v",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "token_correspondence_BoolExp.vars.fuel_instrumented",
        "token_correspondence_FStar.Set.empty",
        "token_correspondence_FStar.Set.mem",
        "token_correspondence_FStar.Set.set",
        "token_correspondence_FStar.Set.singleton",
        "token_correspondence_PairHeap.elts.fuel_instrumented",
        "token_correspondence_SetExtra.greaterEq",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_BoolExp.compileBexpEval", "typing_BoolExp.evalBexp",
        "typing_BoolExp.occursInBexp", "typing_BoolExp.substOneVar",
        "typing_BoolExp.substVar", "typing_BoolExp.vars",
        "typing_Circuit.evalCirc", "typing_Circuit.mods",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.complement",
        "typing_FStar.Set.mem", "typing_FStar.Set.singleton",
        "typing_FStar.Set.union",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__gates",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_PairHeap.elts", "typing_PairHeap.is_heap",
        "typing_SetExtra.ins", "typing_SetExtra.rem",
        "typing_Tm_abs_3268867124b003f4a98a49f0a1164e06",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Tm_abs_f3bec76b5a7811029b03c8cb1edcc1ce",
        "typing_Total.__proj__Mkt__item__elts", "typing_Total.lookup",
        "typing_Total.mapVals", "typing_Total.update", "typing_Total.vals",
        "typing_tok_BoolExp.BFalse@tok"
      ],
      0
    ],
    [
      "GC.assign_value_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      45,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      46,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      47,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      48,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      49,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      50,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      51,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      52,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      53,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      54,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      55,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      56,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      57,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      58,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      59,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      60,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      61,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      62,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      63,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      64,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      65,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      66,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      67,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      68,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      69,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      70,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      71,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      72,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      73,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      74,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      75,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      76,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      77,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      78,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      79,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      80,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      81,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      82,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      83,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      84,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      85,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      86,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      87,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      88,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      89,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      90,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      91,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      92,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      93,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      94,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      95,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      96,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      97,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      98,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      99,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      100,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      101,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      102,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      103,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      104,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      105,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      106,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      107,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      108,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      109,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      110,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      111,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      112,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      113,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      114,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      115,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      116,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      117,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      118,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      119,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      120,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      121,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      122,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      123,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      124,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      125,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      126,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      127,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      128,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      129,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      130,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      131,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      132,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      133,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      134,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      135,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      136,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      137,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      138,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      139,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      140,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      141,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      142,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      143,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      144,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      145,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      146,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      147,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      148,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      149,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      150,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      151,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      152,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      153,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      154,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      155,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      156,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      157,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      158,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      159,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      160,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      161,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      162,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      163,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      164,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      165,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      166,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      167,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      168,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      169,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      170,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      171,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      172,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      173,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      174,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      175,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      176,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      177,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      178,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      179,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      180,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      181,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      182,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      183,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      184,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      185,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      186,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      187,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      188,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      189,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      190,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      191,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      192,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      193,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      194,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      195,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      196,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      197,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      198,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      199,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      200,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      201,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      202,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      203,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      204,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      205,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      206,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      207,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      208,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      209,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      210,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      211,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_value_lemma",
      212,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      14,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.valid_GC_state",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.valid_GC_state",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.valid_GC_state",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.valid_GC_state",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.valid_GC_state",
      28,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.valid_GC_state",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.valid_GC_state",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.valid_GC_state",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      6,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      14,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_valid",
      18,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_inversion",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Tm_unit", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.Set.eqtype", "equation_GC.garbageCollect",
        "equation_GC.precond1", "equation_GC.valid_GC_state",
        "equation_Prims.eqtype", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.evalBexp.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_Prims.bool",
        "function_token_typing_Total.vals",
        "interpretation_Tm_arrow_db119ebfc877e06e31c1e4d794b24394",
        "pretyping_ae567c2fb75be05905677af440075565",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_GC.MkcircGCState_isanc",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_Total.vals", "typing_AncillaHeap.elts",
        "typing_FStar.Set.mem", "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_GC.garbageCollect", "typing_Total.lookup"
      ],
      0
    ],
    [
      "GC.minor_lemma1",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      25,
      2,
      1,
      [
        "@query", "constructor_distinct_PairHeap.Empty",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.emptyHeap", "equation_Total.lookup",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap", "int_inversion",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_PairHeap.Empty__a",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27"
      ],
      0
    ],
    [
      "GC.minor_lemma1",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.minor_lemma1",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.alloc_pres_valid",
      1,
      2,
      2,
      [
        "@query", "assumption_BoolExp.boolExp_haseq",
        "assumption_Prims.HasEq_bool", "bool_inversion", "bool_typing",
        "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Tm_unit", "data_elim_GC.MkcircGCState",
        "data_elim_PairHeap.Heap", "data_elim_Prims.Mktuple2",
        "data_elim_Total.Mkt", "equality_tok_BoolExp.BFalse@tok",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_AncillaHeap.zeroHeap", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_GC.circGCAlloc",
        "equation_GC.valid_GC_state", "equation_Interpreter.boolInit",
        "equation_PairHeap.getMin", "equation_PairHeap.intHeap",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.ins", "equation_Total.constMap",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.update", "equation_Total.vals",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_PairHeap.elts_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_Interpreter.boolInit",
        "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_Total.__proj__Mkt__item__elts",
        "function_token_typing_Total.update",
        "function_token_typing_Total.vals", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_673119776848e56dff5dda2ccc8a4001",
        "interpretation_Tm_arrow_82c0946f9652360a5f5968875182b89e",
        "interpretation_Tm_arrow_db119ebfc877e06e31c1e4d794b24394",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_a693695093cfd5995dc135f3dbf2efd8",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_GC.MkcircGCState_isanc",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_PairHeap.elts_lst.fuel_instrumented",
        "token_correspondence_Total.__proj__Mkt__item__elts",
        "token_correspondence_Total.update",
        "token_correspondence_Total.vals",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_BoolExp.vars", "typing_FStar.List.Tot.fold_left",
        "typing_FStar.Set.mem", "typing_FStar.Set.set",
        "typing_FStar.Set.singleton",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_GC.__proj__MkcircGCState__item__top", "typing_PairHeap.elts",
        "typing_PairHeap.is_heap", "typing_SetExtra.greaterEq",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.lookup", "typing_tok_BoolExp.BFalse@tok",
        "unit_inversion"
      ],
      0
    ],
    [
      "GC.alloc_pres_valid",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.alloc_pres_valid",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple3",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Some", "constructor_distinct_Tm_unit",
        "data_elim_GC.MkcircGCState", "data_elim_Total.Mkt",
        "disc_equation_BoolExp.BFalse", "disc_equation_Prims.None",
        "disc_equation_Prims.Some", "equality_tok_BoolExp.BFalse@tok",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_Circuit.circuit", "equation_FStar.List.Tot.test_sort",
        "equation_FStar.Set.eqtype", "equation_GC.circGCAssign",
        "equation_GC.garbageCollect", "equation_GC.precond3",
        "equation_GC.valid_GC_state", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_SetExtra.greaterEq", "int_inversion",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "kinding_BoolExp.boolExp@tok", "lemma_FStar.Set.mem_union",
        "lemma_Prims.invertOption", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Addition", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Prims.Mktuple3__1", "proj_equation_Prims.Mktuple3__2",
        "proj_equation_Prims.Mktuple3__3",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_GC.MkcircGCState_isanc",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple3__1",
        "projection_inverse_Prims.Mktuple3__2",
        "projection_inverse_Prims.Mktuple3__3",
        "projection_inverse_Prims.Mktuple3__a",
        "projection_inverse_Prims.Mktuple3__b",
        "projection_inverse_Prims.Mktuple3__c",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_PairHeap.elts.fuel_instrumented",
        "token_correspondence_SetExtra.greaterEq",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.get_min",
        "typing_AncillaHeap.mem", "typing_FStar.Set.mem",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_GC.circGCAssign", "typing_PairHeap.is_heap",
        "typing_Total.vals", "unit_inversion"
      ],
      0
    ],
    [
      "GC.assign_pres_valid",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      4,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      12,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_valid",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.equiv_state",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.equiv_state",
      2,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.equiv_state",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.garbageCollect_pres_equiv",
      1,
      2,
      1,
      [
        "@query", "constructor_distinct_Tm_unit", "data_elim_Total.Mkt",
        "equation_FStar.Set.eqtype", "equation_GC.circGCEval",
        "equation_GC.equiv_state", "equation_GC.garbageCollect",
        "equation_Interpreter.boolState", "equation_Prims.eqtype",
        "equation_Prims.fst", "equation_Total.state",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "pretyping_ae567c2fb75be05905677af440075565",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_GC.MkcircGCState_top",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_GC.garbageCollect", "typing_Total.lookup"
      ],
      0
    ],
    [
      "GC.garbageCollect_pres_equiv",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.garbageCollect_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.alloc_pres_equiv",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_typing",
        "data_elim_Prims.Mktuple2", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.popMin", "equation_FStar.Set.eqtype",
        "equation_GC.circGCAlloc", "equation_GC.circGCEval",
        "equation_GC.equiv_state", "equation_GC.valid_GC_state",
        "equation_Interpreter.boolAlloc", "equation_Interpreter.boolEval",
        "equation_Interpreter.boolState", "equation_Prims.eqtype",
        "equation_Prims.fst", "equation_Prims.snd", "equation_Total.state",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t", "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_Total.state", "lemma_Total.lookup_update1",
        "lemma_Total.lookup_update2",
        "pretyping_a693695093cfd5995dc135f3dbf2efd8",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Equality", "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_GC.MkcircGCState_top",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.popMin",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__symtab", "typing_Prims.fst",
        "unit_inversion"
      ],
      0
    ],
    [
      "GC.alloc_pres_equiv",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.alloc_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "bool_typing",
        "constructor_distinct_BoolExp.BAnd",
        "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BNot",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_BoolExp.boolExp",
        "constructor_distinct_Circuit.RCNOT",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Cons",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Prims.Some",
        "constructor_distinct_Prims.unit", "constructor_distinct_Tm_unit",
        "data_elim_BoolExp.BAnd", "data_elim_BoolExp.BVar",
        "data_elim_Prims.Mktuple2", "data_elim_Total.Mkt",
        "data_typing_intro_Prims.Nil@tok", "disc_equation_BoolExp.BFalse",
        "disc_equation_Prims.Some", "equality_tok_BoolExp.BFalse@tok",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_AncillaHeap.zeroHeap", "equation_BoolExp.compileBexpEval",
        "equation_BoolExp.compileBexpEvalSt",
        "equation_BoolExp.compilerResult", "equation_BoolExp.first",
        "equation_BoolExp.last", "equation_Circuit.applyGate",
        "equation_Circuit.circuit", "equation_FStar.List.Tot.test_sort",
        "equation_FStar.Set.eqtype", "equation_FStar.Set.subset",
        "equation_GC.circGCAssign", "equation_GC.circGCEval",
        "equation_GC.equiv_state", "equation_GC.precond1",
        "equation_GC.precond3", "equation_GC.valid_GC_state",
        "equation_Interpreter.boolAssign", "equation_Interpreter.boolEval",
        "equation_Interpreter.boolState", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.ins", "equation_Total.agree_on",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.compileBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.factorAs.fuel_instrumented",
        "equation_with_fuel_BoolExp.substVar.fuel_instrumented",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_Circuit.evalCirc.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.compileBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.factorAs.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_Circuit.mods.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_BoolExp.boolExp",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Prims.tuple3",
        "fuel_guarded_inversion_Prims.tuple4",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.evalBexp.fuel_instrumented",
        "fuel_irrelevance_BoolExp.vars.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq",
        "function_token_typing_Total.state", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "kinding_Circuit.gate@tok", "lemma_Circuit.evalCirc_append",
        "lemma_FStar.Set.mem_complement", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_779086306c29597e3dd1127d16405da1",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "pretyping_f8666440faa91836cc5a13998af863fc",
        "primitive_Prims.op_Addition", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_LessThan", "primitive_Prims.op_Negation",
        "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_GC.MkcircGCState_ah",
        "proj_equation_GC.MkcircGCState_cvals",
        "proj_equation_GC.MkcircGCState_gates",
        "proj_equation_GC.MkcircGCState_isanc",
        "proj_equation_GC.MkcircGCState_symtab",
        "proj_equation_GC.MkcircGCState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Prims.Mktuple3__1", "proj_equation_Prims.Mktuple3__2",
        "proj_equation_Prims.Mktuple3__3",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoolExp.BAnd__0",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_Circuit.RCNOT__0",
        "projection_inverse_GC.MkcircGCState_ah",
        "projection_inverse_GC.MkcircGCState_cvals",
        "projection_inverse_GC.MkcircGCState_gates",
        "projection_inverse_GC.MkcircGCState_isanc",
        "projection_inverse_GC.MkcircGCState_symtab",
        "projection_inverse_GC.MkcircGCState_top",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple3__1",
        "projection_inverse_Prims.Mktuple3__2",
        "projection_inverse_Prims.Mktuple3__3",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.Nil_a", "projection_inverse_Prims.Some_a",
        "projection_inverse_Prims.Some_v",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_PairHeap.elts.fuel_instrumented",
        "token_correspondence_Prims.op_LessThan",
        "token_correspondence_SetExtra.greaterEq",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_AncillaHeap.popMin", "typing_BoolExp.compileBexp",
        "typing_BoolExp.compileBexpEval", "typing_BoolExp.evalBexp",
        "typing_BoolExp.substVar", "typing_BoolExp.vars",
        "typing_Circuit.evalCirc", "typing_Circuit.mods",
        "typing_FStar.Set.mem", "typing_FStar.Set.singleton",
        "typing_GC.__proj__MkcircGCState__item__ah",
        "typing_GC.__proj__MkcircGCState__item__cvals",
        "typing_GC.__proj__MkcircGCState__item__gates",
        "typing_GC.__proj__MkcircGCState__item__isanc",
        "typing_GC.__proj__MkcircGCState__item__symtab",
        "typing_GC.circGCAssign", "typing_GC.circGCEval",
        "typing_Interpreter.boolAssign", "typing_Interpreter.boolEval",
        "typing_PairHeap.elts", "typing_PairHeap.is_heap",
        "typing_Prims.snd", "typing_Total.lookup", "typing_Total.update",
        "typing_Total.vals", "unit_inversion", "unit_typing"
      ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      4,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      10,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      13,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      18,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      26,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      32,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      34,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "GC.assign_pres_equiv",
      38,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "GC.step_pres_equiv",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_pres_equiv",
      2,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "GC.step_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_pres_equiv",
      4,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "GC.step_pres_equiv",
      5,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_pres_equiv",
      6,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [ "GC.step_pres_equiv", 7, 2, 1, [ "@query" ], 0 ],
    [
      "GC.step_lst_pres_equiv",
      1,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_lst_pres_equiv",
      2,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "GC.step_lst_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_lst_pres_equiv",
      4,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "GC.step_lst_pres_equiv",
      5,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_lst_pres_equiv",
      6,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [ "GC.step_lst_pres_equiv", 7, 2, 1, [ "@query" ], 0 ],
    [
      "GC.step_pres_equiv",
      8,
      2,
      2,
      [
        "@query", "assumption_GC.circGCState_haseq",
        "binder_x_0252d137bc3fef00f0695356dc8aeb09_1",
        "binder_x_6b74f0037009d29c0456341c2163d847_2",
        "binder_x_a693695093cfd5995dc135f3dbf2efd8_0",
        "binder_x_c4ad57559b80f11b499d69e4bf9180c0_3", "bool_inversion",
        "constructor_distinct_ExprTypes.AND",
        "constructor_distinct_ExprTypes.APPEND",
        "constructor_distinct_ExprTypes.APPLY",
        "constructor_distinct_ExprTypes.ASSERT",
        "constructor_distinct_ExprTypes.ASSIGN",
        "constructor_distinct_ExprTypes.BEXP",
        "constructor_distinct_ExprTypes.BOOL",
        "constructor_distinct_ExprTypes.GET_ARRAY",
        "constructor_distinct_ExprTypes.LET",
        "constructor_distinct_ExprTypes.LOC",
        "constructor_distinct_ExprTypes.ROT",
        "constructor_distinct_ExprTypes.SEQUENCE",
        "constructor_distinct_ExprTypes.SLICE",
        "constructor_distinct_ExprTypes.UNIT",
        "constructor_distinct_ExprTypes.XOR",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple3",
        "constructor_distinct_Tm_unit", "constructor_distinct_Utils.Err",
        "constructor_distinct_Utils.Val", "data_elim_ExprTypes.AND",
        "data_elim_ExprTypes.APPEND", "data_elim_ExprTypes.APPLY",
        "data_elim_ExprTypes.ASSIGN", "data_elim_ExprTypes.GET_ARRAY",
        "data_elim_ExprTypes.LET", "data_elim_ExprTypes.ROT",
        "data_elim_ExprTypes.SEQUENCE", "data_elim_ExprTypes.SLICE",
        "data_elim_ExprTypes.XOR", "data_elim_Interpreter.Mkinterpretation",
        "data_elim_Prims.Mktuple2", "data_elim_Utils.Err",
        "data_elim_Utils.Val", "data_typing_intro_Prims.Mktuple2@tok",
        "disc_equation_ExprTypes.AND", "disc_equation_ExprTypes.APPEND",
        "disc_equation_ExprTypes.APPLY", "disc_equation_ExprTypes.ARRAY",
        "disc_equation_ExprTypes.ASSERT", "disc_equation_ExprTypes.ASSIGN",
        "disc_equation_ExprTypes.BEXP", "disc_equation_ExprTypes.BOOL",
        "disc_equation_ExprTypes.GET_ARRAY", "disc_equation_ExprTypes.LET",
        "disc_equation_ExprTypes.LOC", "disc_equation_ExprTypes.ROT",
        "disc_equation_ExprTypes.SEQUENCE", "disc_equation_ExprTypes.SLICE",
        "disc_equation_ExprTypes.XOR", "equality_tok_ExprTypes.UNIT@tok",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_GC.circGCAlloc", "equation_GC.circGCInterp",
        "equation_GC.equiv_state", "equation_Interpreter.boolAlloc",
        "equation_Interpreter.boolInterp", "equation_Interpreter.boolState",
        "equation_Interpreter.config", "equation_Interpreter.isBexp",
        "equation_Prims._assert", "equation_Prims.fst", "equation_Prims.snd",
        "equation_Total.state", "equation_Utils.bindT",
        "equation_Utils.getVal", "equation_Utils.is_Err",
        "equation_Utils.is_Val",
        "equation_with_fuel_Interpreter.isVal.fuel_instrumented",
        "equation_with_fuel_Interpreter.step.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal.fuel_instrumented",
        "fuel_correspondence_Interpreter.step.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "fuel_guarded_inversion_Utils.result",
        "fuel_irrelevance_Interpreter.step.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_GC.circGCInterp",
        "function_token_typing_Interpreter.boolInterp",
        "function_token_typing_Interpreter.boolState",
        "function_token_typing_Utils.getVal", "int_inversion",
        "interpretation_Tm_abs_006b1694bb1a787355d910cb052aca07",
        "interpretation_Tm_abs_21f2992ca42e12fec878b95b5baf7307",
        "interpretation_Tm_abs_381be45e8a3974e1c63576644dd97052",
        "interpretation_Tm_abs_3d71f2fe6a3d4235cf8ab9a53d981d94",
        "interpretation_Tm_abs_62359ff8db4829d2e3cf82250ecd361c",
        "interpretation_Tm_abs_7c6ce8a6e62a908b5cb995129afb549a",
        "interpretation_Tm_abs_7e518e5eab3ee57199ad194a0d9d84ec",
        "interpretation_Tm_abs_7ea39c059b11be112ce39a83c89a0fd0",
        "interpretation_Tm_abs_80bb224ce14d292a8d94b6c3c8c6d968",
        "interpretation_Tm_abs_82bd2b55d877e457d1b35cb30016fd3e",
        "interpretation_Tm_abs_82fe06fd42e896f93d134293f01f6c07",
        "interpretation_Tm_abs_97b6c0a9202d5b4d48afa1f6bf7cecac",
        "interpretation_Tm_abs_ad67e99e57f9788d0ab9462753777886",
        "interpretation_Tm_abs_dc9f43bf2187cf6c07a3ff07c8488934",
        "interpretation_Tm_abs_dcdbe06440c29b258a546e22a1a2f7a8",
        "interpretation_Tm_abs_eba2bdcd056943bd0e0ecf6dd0e90b4b",
        "interpretation_Tm_arrow_66ddc3837056a9eb4acc0461b6a56c5a",
        "interpretation_Tm_arrow_cc1302d183189fb36ec98de01a178113",
        "interpretation_Tm_arrow_df028924c610397812d85a52172d9ad6",
        "kinding_ExprTypes.gExpr@tok", "kinding_GC.circGCState@tok",
        "primitive_Prims.op_AmpAmp", "primitive_Prims.op_LessThan",
        "primitive_Prims.op_Negation",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Interpreter.Mkinterpretation_alloc",
        "proj_equation_Interpreter.Mkinterpretation_assign",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_ExprTypes.AND__0",
        "projection_inverse_ExprTypes.APPEND__0",
        "projection_inverse_ExprTypes.APPLY__0",
        "projection_inverse_ExprTypes.ASSERT__0",
        "projection_inverse_ExprTypes.ASSIGN__0",
        "projection_inverse_ExprTypes.BEXP__0",
        "projection_inverse_ExprTypes.BOOL__0",
        "projection_inverse_ExprTypes.GET_ARRAY__0",
        "projection_inverse_ExprTypes.LET__0",
        "projection_inverse_ExprTypes.LOC__0",
        "projection_inverse_ExprTypes.ROT__0",
        "projection_inverse_ExprTypes.SEQUENCE__0",
        "projection_inverse_ExprTypes.SLICE__0",
        "projection_inverse_ExprTypes.XOR__0",
        "projection_inverse_Interpreter.Mkinterpretation_alloc",
        "projection_inverse_Interpreter.Mkinterpretation_assign",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple3__1",
        "projection_inverse_Prims.Mktuple3__2",
        "projection_inverse_Prims.Mktuple3__3",
        "projection_inverse_Prims.Mktuple3__a",
        "projection_inverse_Prims.Mktuple3__b",
        "projection_inverse_Prims.Mktuple3__c",
        "projection_inverse_Utils.Err__0", "projection_inverse_Utils.Err__a",
        "projection_inverse_Utils.Val__0", "projection_inverse_Utils.Val__a",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "refinement_interpretation_Tm_refine_a6f434602943b2296f2a902c15fee423",
        "subterm_ordering_ExprTypes.AND",
        "subterm_ordering_ExprTypes.APPEND",
        "subterm_ordering_ExprTypes.APPLY",
        "subterm_ordering_ExprTypes.ASSERT",
        "subterm_ordering_ExprTypes.ASSIGN",
        "subterm_ordering_ExprTypes.GET_ARRAY",
        "subterm_ordering_ExprTypes.LET", "subterm_ordering_ExprTypes.ROT",
        "subterm_ordering_ExprTypes.SEQUENCE",
        "subterm_ordering_ExprTypes.SLICE", "subterm_ordering_ExprTypes.XOR",
        "subterm_ordering_Prims.Mktuple2", "subterm_ordering_Prims.Mktuple3",
        "token_correspondence_GC.circGCAlloc",
        "token_correspondence_GC.circGCAssign",
        "token_correspondence_Interpreter.boolAlloc",
        "token_correspondence_Interpreter.boolAssign",
        "token_correspondence_Interpreter.step.fuel_instrumented",
        "token_correspondence_Prims.op_LessThan",
        "token_correspondence_Utils.getVal", "typing_Interpreter.config",
        "typing_Interpreter.isBexp", "typing_Interpreter.isVal",
        "typing_Interpreter.step",
        "typing_Tm_abs_7ea39c059b11be112ce39a83c89a0fd0",
        "typing_Utils.bindT", "typing_Utils.getVal", "typing_Utils.is_Err",
        "typing_Utils.is_Val", "unit_inversion"
      ],
      0
    ],
    [
      "GC.step_pres_equiv",
      9,
      2,
      1,
      [
        "@query", "binder_x_0252d137bc3fef00f0695356dc8aeb09_1",
        "binder_x_84a62770dc4fae20d5c368546b439b5f_2",
        "binder_x_a693695093cfd5995dc135f3dbf2efd8_0",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Utils.Val",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.emptyHeap",
        "equation_FStar.List.Tot.test_sort", "equation_GC.circGCInterp",
        "equation_Interpreter.boolInterp", "equation_Interpreter.boolState",
        "equation_Interpreter.listconfig", "equation_Prims._assert",
        "equation_Prims.snd", "equation_Utils.getVal",
        "equation_Utils.is_Val",
        "equation_with_fuel_Interpreter.step_lst.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.step_lst.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_GC.circGCState",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Prims.tuple2",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Nil_a", "projection_inverse_Utils.Val__0",
        "projection_inverse_Utils.Val__a",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27"
      ],
      0
    ],
    [
      "GC.step_pres_equiv",
      10,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_pres_equiv",
      11,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "GC.step_pres_equiv",
      12,
      2,
      1,
      [ "@query", "assumption_GC.circGCState_haseq" ],
      0
    ],
    [
      "GC.step_pres_equiv",
      13,
      2,
      1,
      [
        "@query", "data_elim_Interpreter.Mkinterpretation",
        "equation_FStar.Set.eqtype", "equation_Interpreter.boolInterp",
        "equation_Interpreter.boolState",
        "function_token_typing_Interpreter.boolInterp",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ]
  ]
]