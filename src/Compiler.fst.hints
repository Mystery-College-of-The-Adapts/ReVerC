[
  "Hzù\nˇkª\u0006≈7Óy¥∏÷,",
  [
    [
      "Compiler.circState",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circState",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circState",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circState",
      4,
      2,
      1,
      [
        "@query", "assumption_AncillaHeap.ancHeapRecord_haseq",
        "assumption_Circuit.gate_haseq", "assumption_Prims.HasEq_int",
        "assumption_Prims.list_haseq", "assumption_Total.t_haseq",
        "data_elim_Total.Mkt", "equation_AncillaHeap.ancHeap",
        "equation_Prims.eqtype", "fuel_guarded_inversion_Total.t",
        "haseqTm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "kinding_Circuit.gate@tok",
        "pretyping_ae567c2fb75be05905677af440075565"
      ],
      0
    ],
    [
      "Compiler.MkcircState.subs",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circInit",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circInit",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "Compiler.circInit", 3, 2, 1, [ "@query" ], 0 ],
    [ "Compiler.circAlloc", 1, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.circAlloc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAlloc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "bool_typing",
        "data_elim_Compiler.MkcircState", "data_elim_Total.Mkt",
        "disc_equation_Prims.None", "equation_Prims.eqtype",
        "fuel_correspondence_BoolExp.factorAs.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Total.t", "int_inversion",
        "kinding_BoolExp.boolExp@tok", "lemma_Prims.invertOption",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "proj_equation_Compiler.MkcircState_subs", "typing_BoolExp.factorAs",
        "typing_BoolExp.substVar", "typing_Compiler.MkcircState.subs",
        "typing_Prims.is_Some", "typing_Total.lookup"
      ],
      0
    ],
    [
      "Compiler.circAssign",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circEval",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circEval",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circEval",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circEval",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circInterp",
      1,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [
      "Compiler.allocNcirc",
      1,
      2,
      1,
      [
        "@query", "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_1",
        "equality_tok_Prims.LexTop@tok", "int_inversion", "int_typing",
        "primitive_Prims.op_LessThanOrEqual",
        "primitive_Prims.op_Subtraction", "projection_inverse_BoxInt_proj_0",
        "well-founded-ordering-on-nat"
      ],
      0
    ],
    [
      "Compiler.allocNcirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.allocNcirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "Compiler.allocTycirc", 1, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.allocTycirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.allocTycirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      2,
      2,
      1,
      [
        "@query", "binder_x_45b5ec812472bc4115943497241d5053_1",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0", "bool_inversion",
        "constructor_distinct_PairHeap.Empty", "disc_equation_ExprTypes.LOC",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_with_fuel_Interpreter.isVal_lst.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal_lst.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_Interpreter.isVal_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Prims.Cons_hd",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_tl",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "refinement_interpretation_Tm_refine_fc003454349819ae5ed8a644efa3342e",
        "subterm_ordering_Prims.Cons", "typing_Interpreter.isVal_lst"
      ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.compileCirc",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "constructor_distinct_ExprTypes.ARRAY",
        "disc_equation_ExprTypes.ARRAY", "disc_equation_ExprTypes.LAMBDA",
        "disc_equation_ExprTypes.LOC", "disc_equation_ExprTypes.UNIT",
        "disc_equation_Util.Err", "disc_equation_Util.Val",
        "equation_Compiler.allocTycirc", "equation_Interpreter.config",
        "equation_with_fuel_Interpreter.isVal.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal_lst.fuel_instrumented",
        "fuel_guarded_inversion_Util.result",
        "fuel_irrelevance_Interpreter.isVal_lst.fuel_instrumented",
        "projection_inverse_ExprTypes.ARRAY__0",
        "typing_Compiler.allocTycirc", "typing_Interpreter.isVal_lst"
      ],
      0
    ],
    [
      "Compiler.compileCirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.compileCirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.compileCirc",
      4,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [ "Compiler.circ_equiv", 1, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.circ_equiv",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv",
      3,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.circ_equiv",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.substVar_disjoint",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.substVar_disjoint",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.substVar_disjoint",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.substVar_disjoint",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.substVar_disjoint",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.substVar_disjoint",
      6,
      2,
      1,
      [
        "@query", "equation_FStar.Set.subset", "equation_SetExtra.disjoint",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "unit_inversion", "unit_typing"
      ],
      0
    ],
    [
      "Compiler.eval_bexp_swap2",
      1,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "Compiler.eval_bexp_swap2",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_bexp_swap2",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_bexp_swap2",
      4,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [ "Compiler.eval_bexp_swap2", 5, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.eval_bexp_swap2",
      6,
      2,
      2,
      [
        "@query", "assumption_Prims.HasEq_int",
        "binder_x_0252d137bc3fef00f0695356dc8aeb09_0",
        "binder_x_3ad6abd43c9a73c5e7f6675387388c43_2",
        "binder_x_3ad6abd43c9a73c5e7f6675387388c43_3",
        "binder_x_9d49f0d7939edbb70c024ecaaded5353_1",
        "binder_x_c4ad57559b80f11b499d69e4bf9180c0_4", "bool_inversion",
        "constructor_distinct_BoolExp.BAnd",
        "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BNot",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_BoolExp.boolExp",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.unit", "data_elim_BoolExp.BAnd",
        "data_elim_BoolExp.BVar", "data_elim_BoolExp.BXor",
        "data_elim_Prims.Mktuple2", "disc_equation_BoolExp.BAnd",
        "disc_equation_BoolExp.BFalse", "disc_equation_BoolExp.BNot",
        "disc_equation_BoolExp.BVar", "disc_equation_BoolExp.BXor",
        "equality_tok_BoolExp.BFalse@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_Compiler.circEval",
        "equation_Compiler.circ_equiv", "equation_FStar.List.Tot.test_sort",
        "equation_Interpreter.boolEval", "equation_Interpreter.boolState",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.snd", "equation_SetExtra.disjoint",
        "equation_Total.lookup", "equation_Total.state",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.substVar.fuel_instrumented",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_BoolExp.boolExp",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_BoolExp.evalBexp.fuel_instrumented",
        "fuel_irrelevance_BoolExp.substVar.fuel_instrumented",
        "fuel_irrelevance_BoolExp.vars.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int", "int_inversion",
        "lemma_FStar.Set.mem_union",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_f8666440faa91836cc5a13998af863fc",
        "primitive_Prims.op_BarBar",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoolExp.BAnd__0",
        "projection_inverse_BoolExp.BNot__0",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "subterm_ordering_BoolExp.BAnd", "subterm_ordering_BoolExp.BNot",
        "subterm_ordering_BoolExp.BXor", "subterm_ordering_Prims.Mktuple2",
        "token_correspondence_BoolExp.vars.fuel_instrumented",
        "typing_AncillaHeap.MkancHeapRecord.hp",
        "typing_AncillaHeap.MkancHeapRecord.max", "typing_BoolExp.vars",
        "typing_Compiler.MkcircState.ah", "typing_FStar.Set.mem",
        "typing_PairHeap.elts", "unit_typing"
      ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      1,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      14,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ",
      15,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [ "Compiler.eval_commutes_subst_circ", 16, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.eval_commutes_subst_circ",
      17,
      2,
      1,
      [
        "@query", "bool_inversion", "bool_typing",
        "constructor_distinct_Tm_unit", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_BoolExp.compileBexpEval",
        "equation_BoolExp.compilerResult", "equation_BoolExp.last",
        "equation_Circuit.circuit", "equation_Compiler.circEval",
        "equation_Compiler.circ_equiv", "equation_Interpreter.boolEval",
        "equation_Interpreter.boolState", "equation_Prims.eqtype",
        "equation_Prims.snd", "equation_Total.state",
        "equation_with_fuel_BoolExp.compileBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.compileBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Prims.tuple4",
        "fuel_guarded_inversion_Total.t", "int_inversion",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Equality",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Prims.Mktuple4__2", "typing_AncillaHeap.elts",
        "typing_BoolExp.compileBexp", "typing_Compiler.MkcircState.ah",
        "typing_FStar.Set.mem"
      ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      1,
      2,
      1,
      [ "@query", "assumption_BoolExp.boolExp_haseq" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      6,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [ "Compiler.eval_commutes_subst_circ_oop", 7, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.eval_commutes_subst_circ_oop",
      8,
      2,
      1,
      [
        "@query", "equation_AncillaHeap.ancHeap",
        "equation_BoolExp.compileBexpEval_oop",
        "equation_BoolExp.compilerResult", "equation_BoolExp.last",
        "equation_BoolExp.second", "equation_Circuit.circuit",
        "equation_Compiler.circ_equiv",
        "fuel_guarded_inversion_Prims.tuple4",
        "proj_equation_Compiler.MkcircState_ah",
        "typing_BoolExp.compileBexp_oop", "typing_Compiler.MkcircState.ah"
      ],
      0
    ],
    [
      "Compiler.circ_equiv_alloc",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_inversion",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2", "data_elim_Prims.Mktuple2",
        "data_elim_Total.Mkt", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.delete_min",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_AncillaHeap.get_min", "equation_AncillaHeap.mem",
        "equation_Circuit.circuit", "equation_Compiler.circAlloc",
        "equation_Compiler.circEval", "equation_Compiler.circ_equiv",
        "equation_FStar.Set.subset", "equation_Interpreter.boolAlloc",
        "equation_Interpreter.boolEval", "equation_Interpreter.boolState",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.ins", "equation_Total.lookup",
        "equation_Total.state", "equation_Total.update",
        "equation_Total.vals",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_Total.state", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "kinding_Prims.tuple2@tok", "lemma_AncillaHeap.pop_is_zero",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_union",
        "lemma_SetExtra.greaterEq_elts", "lemma_Total.lookup_update1",
        "lemma_Total.lookup_update2",
        "pretyping_9d49f0d7939edbb70c024ecaaded5353",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_gates",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Total.Mkt_dval",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Compiler.MkcircState_ah",
        "projection_inverse_Compiler.MkcircState_gates",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_Compiler.MkcircState_top",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "typing_AncillaHeap.MkancHeapRecord.hp",
        "typing_AncillaHeap.MkancHeapRecord.max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.get_min",
        "typing_AncillaHeap.mem", "typing_Circuit.evalCirc",
        "typing_Compiler.MkcircState.ah",
        "typing_Compiler.MkcircState.gates",
        "typing_Compiler.MkcircState.subs",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.empty",
        "typing_FStar.Set.mem", "typing_FStar.Set.set",
        "typing_FStar.Set.singleton", "typing_PairHeap.elts",
        "typing_Prims.fst", "typing_SetExtra.greaterEq",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.Mkt.elts", "typing_Total.vals"
      ],
      0
    ],
    [
      "Compiler.circ_equiv_alloc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_alloc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_alloc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_alloc",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_inversion",
        "bool_typing", "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.None", "constructor_distinct_Tm_unit",
        "data_elim_AncillaHeap.MkancHeapRecord", "data_elim_Total.Mkt",
        "disc_equation_Prims.None", "disc_equation_Prims.Some",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_AncillaHeap.mem", "equation_BoolExp.first",
        "equation_BoolExp.last", "equation_BoolExp.postCond",
        "equation_BoolExp.second", "equation_Circuit.circuit",
        "equation_Compiler.circAssign", "equation_Compiler.circEval",
        "equation_Compiler.circ_equiv", "equation_FStar.List.Tot.test_sort",
        "equation_FStar.Set.subset", "equation_Interpreter.boolAssign",
        "equation_Interpreter.boolEval", "equation_Interpreter.boolState",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.ins", "equation_Total.lookup",
        "equation_Total.state", "equation_Total.vals",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.factorAs.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_AncillaHeap.ancHeapRecord",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq",
        "function_token_typing_Total.lookup",
        "function_token_typing_Total.state",
        "function_token_typing_Total.vals", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "interpretation_Tm_arrow_9b48db3b49ed8ef8570dbe275c332e3a",
        "interpretation_Tm_arrow_db119ebfc877e06e31c1e4d794b24394",
        "kinding_BoolExp.boolExp@tok", "lemma_Circuit.evalCirc_append",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_union",
        "lemma_Prims.invertOption", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_gates",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Compiler.MkcircState_ah",
        "projection_inverse_Compiler.MkcircState_gates",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_Compiler.MkcircState_top",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.None_a",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_SetExtra.greaterEq",
        "token_correspondence_Total.lookup",
        "token_correspondence_Total.vals",
        "typing_AncillaHeap.MkancHeapRecord.hp",
        "typing_AncillaHeap.MkancHeapRecord.max", "typing_BoolExp.evalBexp",
        "typing_BoolExp.factorAs", "typing_BoolExp.substVar",
        "typing_Compiler.MkcircState.ah",
        "typing_Compiler.MkcircState.gates",
        "typing_Compiler.MkcircState.subs", "typing_Compiler.circAssign",
        "typing_FStar.Set.singleton", "typing_PairHeap.elts",
        "typing_Prims.snd"
      ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circ_equiv_assign",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ]
  ]
]