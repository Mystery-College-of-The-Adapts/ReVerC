[
  "Á‚› Ù\u0016-?è†RB*ë~q",
  [
    [
      "Compiler.circState",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.circState",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circState",
      3,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.circState",
      4,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.circState",
      5,
      2,
      1,
      [
        "@query", "assumption_AncillaHeap.ancHeapRecord_haseq",
        "assumption_Circuit.gate_haseq", "assumption_Prims.HasEq_bool",
        "assumption_Prims.HasEq_int", "assumption_Prims.list_haseq",
        "assumption_Total.t_haseq", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_FStar.Set.eqtype",
        "fuel_guarded_inversion_Total.t", "function_token_typing_Prims.bool",
        "haseqTm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "kinding_Circuit.gate@tok",
        "pretyping_ae567c2fb75be05905677af440075565",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f"
      ],
      0
    ],
    [
      "Compiler.__proj__MkcircState__item__subs",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.__proj__MkcircState__item__zero",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.circInit",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circInit",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circInit",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circInit",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "Compiler.circAlloc", 1, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.circAlloc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAlloc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAlloc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circAlloc",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "disc_equation_Prims.None",
        "disc_equation_Prims.Some", "kinding_BoolExp.boolExp@tok",
        "lemma_Prims.invertOption",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_779086306c29597e3dd1127d16405da1",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2", "typing_Prims.uu___is_None",
        "typing_Prims.uu___is_Some"
      ],
      0
    ],
    [
      "Compiler.circAssign",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circAssign",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circAssign",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circAssign",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circAssign",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circAssign",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circEval",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.circEval",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circEval",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circEval",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.circInterp",
      1,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [
      "Compiler.allocNcirc",
      1,
      2,
      1,
      [
        "@query", "binder_x_6d0180d4fcd10237cf0d87dd345d77cc_1",
        "equality_tok_Prims.LexTop@tok", "int_inversion", "int_typing",
        "primitive_Prims.op_LessThanOrEqual",
        "primitive_Prims.op_Subtraction", "projection_inverse_BoxInt_proj_0",
        "well-founded-ordering-on-nat"
      ],
      0
    ],
    [
      "Compiler.allocNcirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.allocNcirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.allocNcirc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.allocNcirc",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [ "Compiler.allocTycirc", 1, 2, 1, [ "@query" ], 0 ],
    [
      "Compiler.allocTycirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.allocTycirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.allocTycirc",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.allocTycirc",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      2,
      2,
      1,
      [
        "@query", "binder_x_45b5ec812472bc4115943497241d5053_1",
        "binder_x_5905ed9e4dad1ba4ed49ce64b8c65d78_0", "bool_inversion",
        "constructor_distinct_PairHeap.Empty", "disc_equation_ExprTypes.LOC",
        "disc_equation_Prims.Cons", "disc_equation_Prims.Nil",
        "equality_tok_Prims.LexTop@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_with_fuel_Interpreter.isVal_lst.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal_lst.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_Interpreter.isVal_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_Prims.Cons_hd",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_tl",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "refinement_interpretation_Tm_refine_fc003454349819ae5ed8a644efa3342e",
        "subterm_ordering_Prims.Cons", "typing_Interpreter.isVal_lst"
      ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.lookup_Lst",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.compileCirc",
      1,
      2,
      1,
      [
        "@query", "constructor_distinct_ExprTypes.UNIT",
        "constructor_distinct_PairHeap.Empty",
        "disc_equation_ExprTypes.ARRAY", "disc_equation_ExprTypes.LAMBDA",
        "disc_equation_ExprTypes.LOC", "disc_equation_ExprTypes.UNIT",
        "disc_equation_Utils.Err", "disc_equation_Utils.Val",
        "equality_tok_ExprTypes.UNIT@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.emptyHeap",
        "equation_Compiler.allocTycirc", "equation_Interpreter.config",
        "equation_with_fuel_Interpreter.isVal.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal.fuel_instrumented",
        "fuel_correspondence_Interpreter.isVal_lst.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Utils.result",
        "fuel_irrelevance_Interpreter.isVal_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_ExprTypes.ARRAY__0",
        "projection_inverse_PairHeap.Empty__a",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "typing_Compiler.allocTycirc"
      ],
      0
    ],
    [
      "Compiler.compileCirc",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.compileCirc",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.compileCirc",
      4,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      8,
      2,
      1,
      [
        "@query", "bool_inversion", "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Cons",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Prims.None",
        "constructor_distinct_Prims.Some", "constructor_distinct_Tm_unit",
        "data_elim_Compiler.MkcircState", "data_elim_Total.Mkt",
        "disc_equation_Prims.None", "disc_equation_Prims.Some",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_BoolExp.first",
        "equation_Circuit.circuit", "equation_Compiler.circAssign",
        "equation_FStar.Set.eqtype", "equation_FStar.Set.subset",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.ins", "equation_Total.update",
        "equation_Total.vals",
        "equation_with_fuel_FStar.List.Tot.fold_left.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq",
        "function_token_typing_Total.__proj__Mkt__item__elts",
        "int_inversion", "int_typing",
        "interpretation_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_82c0946f9652360a5f5968875182b89e",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_union",
        "lemma_Prims.invertOption", "lemma_SetExtra.greaterEq_elts",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_779086306c29597e3dd1127d16405da1",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Compiler.MkcircState_ah",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.None_a", "projection_inverse_Prims.Some_a",
        "projection_inverse_Prims.Some_v",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_SetExtra.greaterEq",
        "token_correspondence_Total.__proj__Mkt__item__elts",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.empty",
        "typing_FStar.Set.mem", "typing_FStar.Set.set",
        "typing_FStar.Set.singleton", "typing_PairHeap.elts",
        "typing_Prims.uu___is_Some",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.update", "typing_Total.vals", "unit_inversion"
      ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_partition_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      5,
      2,
      1,
      [
        "@query", "bool_inversion", "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.None", "constructor_distinct_Prims.Some",
        "constructor_distinct_Tm_unit", "data_elim_Total.Mkt",
        "disc_equation_Prims.None", "disc_equation_Prims.Some",
        "equality_tok_BoolExp.BFalse@tok", "equation_AncillaHeap.ancHeap",
        "equation_AncillaHeap.cond", "equation_AncillaHeap.delete_min",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_AncillaHeap.get_min", "equation_AncillaHeap.mem",
        "equation_AncillaHeap.popMin", "equation_AncillaHeap.zeroHeap",
        "equation_BoolExp.compileBexpEvalSt", "equation_BoolExp.first",
        "equation_Circuit.circuit", "equation_Compiler.circAssign",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_PairHeap.intHeap",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.fst", "equation_Prims.snd", "equation_SetExtra.diff",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.rem", "equation_Total.lookup",
        "equation_Total.state", "equation_Total.vals",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.substOneVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_PairHeap.heap",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_PairHeap.elts",
        "function_token_typing_Prims.bool",
        "function_token_typing_SetExtra.greaterEq",
        "function_token_typing_Total.lookup", "int_inversion",
        "interpretation_Tm_arrow_2c0d400d791d89b628d7628a254fb94e",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "interpretation_Tm_arrow_9b48db3b49ed8ef8570dbe275c332e3a",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.option@tok",
        "lemma_Circuit.evalCirc_append", "lemma_FStar.Set.mem_empty",
        "lemma_FStar.Set.mem_intersect", "lemma_FStar.Set.mem_union",
        "lemma_Prims.invertOption", "lemma_SetExtra.greaterEq_elts",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Addition", "primitive_Prims.op_AmpAmp",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_LessThan",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_gates",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_Compiler.MkcircState_ah",
        "projection_inverse_Compiler.MkcircState_gates",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.Some_v",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_PairHeap.elts",
        "token_correspondence_Prims.op_LessThan",
        "token_correspondence_SetExtra.greaterEq",
        "token_correspondence_Total.lookup",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.get_min",
        "typing_AncillaHeap.mem", "typing_BoolExp.substVar",
        "typing_BoolExp.vars",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__gates",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_FStar.Set.complement", "typing_FStar.Set.mem",
        "typing_FStar.Set.singleton", "typing_PairHeap.elts",
        "typing_Prims.__proj__Mktuple2__item___2",
        "typing_Prims.uu___is_None", "typing_SetExtra.rem",
        "typing_tok_BoolExp.BFalse@tok", "unit_inversion"
      ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_zeroHeap_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      1,
      2,
      1,
      [ "@query", "assumption_Compiler.circState_haseq" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      19,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      20,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      21,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      22,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      23,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      24,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      25,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      26,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      27,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      28,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      29,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      30,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      31,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      32,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      33,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      34,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      35,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      36,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      37,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      38,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      39,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      40,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      41,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      42,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      43,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      44,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      45,
      2,
      1,
      [
        "@query", "bool_inversion", "bool_typing",
        "constructor_distinct_BoolExp.BAnd",
        "constructor_distinct_BoolExp.BFalse",
        "constructor_distinct_BoolExp.BNot",
        "constructor_distinct_BoolExp.BVar",
        "constructor_distinct_BoolExp.BXor",
        "constructor_distinct_Circuit.RCNOT",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Cons",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Prims.None",
        "constructor_distinct_Prims.Some", "constructor_distinct_Tm_unit",
        "data_elim_BoolExp.BAnd", "data_elim_BoolExp.BXor",
        "data_elim_PairHeap.Heap", "data_elim_Prims.None",
        "data_elim_Total.Mkt", "disc_equation_Prims.None",
        "disc_equation_Prims.Some", "equality_tok_BoolExp.BFalse@tok",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_AncillaHeap.zeroHeap", "equation_BoolExp.compileBexpEval",
        "equation_BoolExp.last", "equation_Circuit.applyGate",
        "equation_Circuit.circuit", "equation_Compiler.circAssign",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_PairHeap.getMin",
        "equation_PairHeap.intHeap", "equation_Prims._assert",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.diff", "equation_SetExtra.disjoint",
        "equation_SetExtra.greaterEq", "equation_SetExtra.ins",
        "equation_SetExtra.rem", "equation_Total.agree_on",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.vals",
        "equation_with_fuel_BoolExp.compileBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.evalBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.factorAs.fuel_instrumented",
        "equation_with_fuel_BoolExp.occursInBexp.fuel_instrumented",
        "equation_with_fuel_BoolExp.substOneVar.fuel_instrumented",
        "equation_with_fuel_BoolExp.substVar.fuel_instrumented",
        "equation_with_fuel_BoolExp.vars.fuel_instrumented",
        "equation_with_fuel_Circuit.evalCirc.fuel_instrumented",
        "equation_with_fuel_Circuit.mods.fuel_instrumented",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.compileBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.factorAs.fuel_instrumented",
        "fuel_correspondence_BoolExp.occursInBexp.fuel_instrumented",
        "fuel_correspondence_BoolExp.substOneVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.substVar.fuel_instrumented",
        "fuel_correspondence_BoolExp.vars.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_Circuit.mods.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_BoolExp.boolExp",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_PairHeap.heap",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_PairHeap.elts.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_FStar.Set.empty",
        "function_token_typing_FStar.Set.mem",
        "function_token_typing_FStar.Set.set",
        "function_token_typing_FStar.Set.singleton",
        "function_token_typing_PairHeap.elts",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq",
        "function_token_typing_Total.__proj__Mkt__item__elts",
        "int_inversion", "int_typing",
        "interpretation_Tm_arrow_2c0d400d791d89b628d7628a254fb94e",
        "interpretation_Tm_arrow_390ad325ba9ff654185adbb4ffeea99f",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_82c0946f9652360a5f5968875182b89e",
        "interpretation_Tm_arrow_8eb620905edb85e3266af3fd3164bbad",
        "interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23",
        "interpretation_Tm_arrow_f285bd18d16ed788dea4e9c47fb2243d",
        "kinding_BoolExp.boolExp@tok", "kinding_Prims.tuple2@tok",
        "lemma_Circuit.evalCirc_append", "lemma_FStar.Set.mem_complement",
        "lemma_FStar.Set.mem_empty", "lemma_FStar.Set.mem_intersect",
        "lemma_FStar.Set.mem_singleton", "lemma_FStar.Set.mem_subset",
        "lemma_FStar.Set.mem_union", "lemma_FStar.Set.subset_mem",
        "lemma_Prims.invertOption", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_779086306c29597e3dd1127d16405da1",
        "pretyping_ae567c2fb75be05905677af440075565",
        "pretyping_f537159ed795b314b4e58c260361ae86",
        "primitive_Prims.op_Addition", "primitive_Prims.op_AmpAmp",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_LessThan", "primitive_Prims.op_Negation",
        "primitive_Prims.op_disEquality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_gates",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_zero",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Total.Mkt_dval",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoolExp.BAnd__0",
        "projection_inverse_BoolExp.BNot__0",
        "projection_inverse_BoolExp.BVar__0",
        "projection_inverse_BoolExp.BXor__0",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_Circuit.RCNOT__0",
        "projection_inverse_Compiler.MkcircState_gates",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_Compiler.MkcircState_zero",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Prims.Nil_a", "projection_inverse_Prims.Some_v",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_BoolExp.substOneVar.fuel_instrumented",
        "token_correspondence_FStar.Set.empty",
        "token_correspondence_FStar.Set.mem",
        "token_correspondence_FStar.Set.set",
        "token_correspondence_FStar.Set.singleton",
        "token_correspondence_PairHeap.elts",
        "token_correspondence_Prims.op_LessThan",
        "token_correspondence_SetExtra.greaterEq",
        "token_correspondence_Total.__proj__Mkt__item__elts",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_BoolExp.compileBexpEval", "typing_BoolExp.evalBexp",
        "typing_BoolExp.occursInBexp", "typing_BoolExp.substVar",
        "typing_BoolExp.vars", "typing_Circuit.evalCirc",
        "typing_Circuit.mods",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__gates",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_Compiler.__proj__MkcircState__item__zero",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.complement",
        "typing_FStar.Set.mem", "typing_FStar.Set.singleton",
        "typing_PairHeap.elts", "typing_PairHeap.is_heap",
        "typing_Prims.uu___is_Some", "typing_SetExtra.rem",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61",
        "typing_Total.lookup", "typing_Total.vals",
        "typing_tok_BoolExp.BFalse@tok"
      ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      46,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      47,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      48,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      49,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      50,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      51,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      52,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      53,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      54,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      55,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      56,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      57,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      58,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      59,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      60,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      61,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      62,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      63,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      64,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      65,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      66,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      67,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      68,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      69,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      70,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      71,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      72,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      73,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      74,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      75,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      76,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      77,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      78,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      79,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      80,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      81,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      82,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      83,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      84,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      85,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      86,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      87,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      88,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      89,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      90,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      91,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      92,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      93,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      94,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      95,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      96,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      97,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      98,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      99,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      100,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      101,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      102,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      103,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      104,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      105,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      106,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      107,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      108,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      109,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      110,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      111,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      112,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      113,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      114,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      115,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      116,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      117,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      118,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      119,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      120,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      121,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      122,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      123,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      124,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      125,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      126,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      127,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      128,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      129,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      130,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      131,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      132,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      133,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      134,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      135,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      136,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      137,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      138,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      139,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      140,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      141,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      142,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      143,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      144,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      145,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      146,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      147,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      148,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      149,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      150,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      151,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      152,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      153,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      154,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      155,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      156,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      157,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      158,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      159,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      160,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      161,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      162,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      163,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      164,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      165,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      166,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      167,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      168,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      169,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      170,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      171,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      172,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      173,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      174,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      175,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_value_lemma",
      176,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      12,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      13,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      14,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      15,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      16,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      17,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.valid_circ_state",
      18,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      1,
      2,
      2,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_inversion",
        "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Tm_unit", "data_elim_PairHeap.Heap",
        "data_elim_Prims.Mktuple2", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.delete_min", "equation_AncillaHeap.elts",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.mem", "equation_AncillaHeap.popMin",
        "equation_AncillaHeap.zeroHeap", "equation_Compiler.circAlloc",
        "equation_Compiler.valid_circ_state", "equation_FStar.Set.eqtype",
        "equation_FStar.Set.subset", "equation_Interpreter.boolInit",
        "equation_PairHeap.getMin", "equation_PairHeap.intHeap",
        "equation_Prims.eqtype", "equation_Prims.fst", "equation_Prims.snd",
        "equation_SetExtra.disjoint", "equation_SetExtra.greaterEq",
        "equation_SetExtra.ins", "equation_Total.constMap",
        "equation_Total.lookup", "equation_Total.state",
        "equation_Total.update", "equation_Total.vals",
        "equation_with_fuel_PairHeap.elts.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.fold_left.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_PairHeap.elts_lst.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.Set.empty",
        "function_token_typing_FStar.Set.mem",
        "function_token_typing_FStar.Set.set",
        "function_token_typing_FStar.Set.singleton",
        "function_token_typing_Interpreter.boolInit",
        "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_Total.__proj__Mkt__item__elts",
        "function_token_typing_Total.vals", "int_inversion", "int_typing",
        "interpretation_Tm_arrow_390ad325ba9ff654185adbb4ffeea99f",
        "interpretation_Tm_arrow_3bc48e9e0ae71786e958e3e19e27d674",
        "interpretation_Tm_arrow_4e0d0fe599851511c8d1bbfd21824586",
        "interpretation_Tm_arrow_82c0946f9652360a5f5968875182b89e",
        "interpretation_Tm_arrow_8eb620905edb85e3266af3fd3164bbad",
        "interpretation_Tm_arrow_db119ebfc877e06e31c1e4d794b24394",
        "interpretation_Tm_arrow_e06752ba152f81447b312efcdf8f0e23",
        "interpretation_Tm_arrow_f285bd18d16ed788dea4e9c47fb2243d",
        "kinding_Prims.tuple2@tok", "lemma_FStar.Set.mem_singleton",
        "lemma_FStar.Set.mem_union", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_9d49f0d7939edbb70c024ecaaded5353",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Addition", "primitive_Prims.op_BarBar",
        "primitive_Prims.op_Equality", "primitive_Prims.op_LessThan",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_gates",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_top",
        "proj_equation_Compiler.MkcircState_zero",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Total.Mkt_dval",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_AncillaHeap.MkancHeapRecord_max",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_Compiler.MkcircState_ah",
        "projection_inverse_Compiler.MkcircState_gates",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_Compiler.MkcircState_zero",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_FStar.Set.empty",
        "token_correspondence_FStar.Set.mem",
        "token_correspondence_FStar.Set.set",
        "token_correspondence_FStar.Set.singleton",
        "token_correspondence_PairHeap.elts_lst.fuel_instrumented",
        "token_correspondence_Prims.op_LessThan",
        "token_correspondence_Total.__proj__Mkt__item__elts",
        "token_correspondence_Total.vals",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.delete_min", "typing_AncillaHeap.elts",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_Compiler.__proj__MkcircState__item__top",
        "typing_Compiler.__proj__MkcircState__item__zero",
        "typing_FStar.List.Tot.fold_left", "typing_FStar.Set.mem",
        "typing_PairHeap.elts", "typing_PairHeap.is_heap",
        "typing_SetExtra.greaterEq",
        "typing_Tm_abs_4f8684e05de4743ee3f94090e1229d61", "unit_inversion"
      ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      10,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_valid",
      11,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      1,
      2,
      1,
      [
        "@query", "bool_inversion", "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Cons",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Prims.Mktuple4",
        "constructor_distinct_Prims.Nil", "constructor_distinct_Prims.Some",
        "constructor_distinct_Tm_unit", "data_elim_Prims.Cons",
        "data_elim_Prims.Some", "data_elim_Total.Mkt",
        "disc_equation_Prims.None", "disc_equation_Prims.Some",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.elts", "equation_AncillaHeap.emptyHeap",
        "equation_AncillaHeap.get_min", "equation_AncillaHeap.mem",
        "equation_Circuit.circuit", "equation_Compiler.circAssign",
        "equation_Compiler.valid_circ_state",
        "equation_FStar.List.Tot.test_sort", "equation_FStar.Set.eqtype",
        "equation_Prims._assert", "equation_Prims.eqtype",
        "equation_Prims.snd", "equation_SetExtra.disjoint",
        "equation_SetExtra.greaterEq", "equation_Total.lookup",
        "equation_Total.state", "equation_Total.update",
        "equation_Total.vals",
        "equation_with_fuel_FStar.List.Tot.assoc.fuel_instrumented",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_FStar.List.Tot.assoc.fuel_instrumented",
        "fuel_correspondence_PairHeap.elts.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.list",
        "fuel_guarded_inversion_Prims.option",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "fuel_irrelevance_FStar.List.Tot.assoc.fuel_instrumented",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_FStar.List.Tot.test_sort",
        "function_token_typing_Prims.int",
        "function_token_typing_SetExtra.greaterEq", "int_inversion",
        "interpretation_Tm_arrow_49d587e9df39d41164f7a5c2431e6c89",
        "lemma_FStar.Set.mem_union", "lemma_SetExtra.greaterEq_elts",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_3ad6abd43c9a73c5e7f6675387388c43",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_BarBar", "primitive_Prims.op_Equality",
        "primitive_Prims.op_GreaterThanOrEqual",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "proj_equation_Total.Mkt_dval", "proj_equation_Total.Mkt_elts",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "projection_inverse_Prims.Mktuple4__1",
        "projection_inverse_Prims.Mktuple4__2",
        "projection_inverse_Prims.Mktuple4__3",
        "projection_inverse_Prims.Mktuple4__4",
        "projection_inverse_Prims.Mktuple4__a",
        "projection_inverse_Prims.Mktuple4__b",
        "projection_inverse_Prims.Mktuple4__c",
        "projection_inverse_Prims.Mktuple4__d",
        "projection_inverse_Total.Mkt_dval",
        "projection_inverse_Total.Mkt_elts",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_PairHeap.elts.fuel_instrumented",
        "token_correspondence_SetExtra.greaterEq",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.mem",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_Compiler.circAssign", "typing_FStar.List.Tot.assoc",
        "typing_FStar.Set.mem", "typing_Total.__proj__Mkt__item__elts",
        "typing_Total.lookup", "typing_Total.update", "unit_inversion"
      ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      4,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      5,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      6,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      7,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      8,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_valid",
      9,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.equiv_state",
      1,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.equiv_state",
      2,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ],
    [
      "Compiler.equiv_state",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_bool" ],
      0
    ],
    [
      "Compiler.alloc_pres_equiv",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_typing",
        "data_elim_Prims.Mktuple2", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.get_min",
        "equation_AncillaHeap.popMin", "equation_Compiler.circAlloc",
        "equation_Compiler.circEval", "equation_Compiler.equiv_state",
        "equation_Compiler.valid_circ_state", "equation_FStar.Set.eqtype",
        "equation_Interpreter.boolAlloc", "equation_Interpreter.boolEval",
        "equation_Interpreter.boolState", "equation_Prims.eqtype",
        "equation_Prims.fst", "equation_Prims.snd", "equation_Total.state",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t", "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_Total.state", "lemma_Total.lookup_update1",
        "lemma_Total.lookup_update2",
        "pretyping_9d49f0d7939edbb70c024ecaaded5353",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Equality",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_gates",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Compiler.MkcircState_gates",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_Compiler.MkcircState_top",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "typing_AncillaHeap.get_min", "typing_AncillaHeap.popMin",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_Prims.fst", "unit_inversion"
      ],
      0
    ],
    [
      "Compiler.alloc_pres_equiv",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.alloc_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_equiv",
      1,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "bool_inversion",
        "bool_typing", "constructor_distinct_PairHeap.Empty",
        "constructor_distinct_Prims.Mktuple2",
        "constructor_distinct_Tm_unit", "data_elim_PairHeap.Heap",
        "data_elim_Prims.Mktuple2", "data_elim_Total.Mkt",
        "equation_AncillaHeap.ancHeap", "equation_AncillaHeap.cond",
        "equation_AncillaHeap.emptyHeap", "equation_AncillaHeap.popMin",
        "equation_Circuit.circuit", "equation_Compiler.circAssign",
        "equation_Compiler.circEval", "equation_Compiler.equiv_state",
        "equation_Compiler.valid_circ_state", "equation_FStar.Set.eqtype",
        "equation_Interpreter.boolAssign", "equation_Interpreter.boolEval",
        "equation_Interpreter.boolState", "equation_PairHeap.intHeap",
        "equation_Prims.fst", "equation_Prims.snd", "equation_Total.lookup",
        "equation_Total.state",
        "equation_with_fuel_PairHeap.is_heap.fuel_instrumented",
        "fuel_correspondence_BoolExp.evalBexp.fuel_instrumented",
        "fuel_correspondence_Circuit.evalCirc.fuel_instrumented",
        "fuel_correspondence_PairHeap.is_heap.fuel_instrumented",
        "fuel_guarded_inversion_Compiler.circState",
        "fuel_guarded_inversion_PairHeap.heap",
        "fuel_guarded_inversion_Prims.tuple2",
        "fuel_guarded_inversion_Total.t",
        "function_token_typing_AncillaHeap.emptyHeap",
        "function_token_typing_Prims.bool",
        "function_token_typing_Prims.int",
        "function_token_typing_Total.lookup",
        "function_token_typing_Total.state", "int_inversion",
        "interpretation_Tm_arrow_9b48db3b49ed8ef8570dbe275c332e3a",
        "lemma_Total.lookup_update1", "lemma_Total.lookup_update2",
        "pretyping_ae567c2fb75be05905677af440075565",
        "primitive_Prims.op_Equality",
        "proj_equation_AncillaHeap.MkancHeapRecord_hp",
        "proj_equation_AncillaHeap.MkancHeapRecord_max",
        "proj_equation_Compiler.MkcircState_ah",
        "proj_equation_Compiler.MkcircState_subs",
        "proj_equation_Compiler.MkcircState_top",
        "proj_equation_Prims.Mktuple2__1", "proj_equation_Prims.Mktuple2__2",
        "projection_inverse_AncillaHeap.MkancHeapRecord_hp",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_Compiler.MkcircState_subs",
        "projection_inverse_Compiler.MkcircState_top",
        "projection_inverse_PairHeap.Empty__a",
        "projection_inverse_Prims.Mktuple2__1",
        "projection_inverse_Prims.Mktuple2__2",
        "projection_inverse_Prims.Mktuple2__a",
        "projection_inverse_Prims.Mktuple2__b",
        "refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Tm_refine_456af8f0ed2e6b59cd4a5bb4e67b3c27",
        "token_correspondence_Total.lookup",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__hp",
        "typing_AncillaHeap.__proj__MkancHeapRecord__item__max",
        "typing_AncillaHeap.popMin", "typing_BoolExp.evalBexp",
        "typing_BoolExp.substVar", "typing_Circuit.evalCirc",
        "typing_Compiler.__proj__MkcircState__item__ah",
        "typing_Compiler.__proj__MkcircState__item__gates",
        "typing_Compiler.__proj__MkcircState__item__subs",
        "typing_Compiler.circAssign", "typing_PairHeap.is_heap",
        "typing_Prims.snd", "typing_Total.lookup"
      ],
      0
    ],
    [
      "Compiler.assign_pres_equiv",
      2,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_equiv",
      3,
      2,
      1,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0
    ],
    [
      "Compiler.assign_pres_equiv",
      4,
      2,
      1,
      [
        "@query", "assumption_Prims.HasEq_bool", "assumption_Prims.HasEq_int"
      ],
      0
    ]
  ]
]